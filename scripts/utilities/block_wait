#!/bin/bash

# shell script to wait for a given block, or relative block

# usage:
# block_wait 10 - waits until block # 10 has come
# block_wait +3 - waits until 3 blocks have passed

set -ef -o pipefail

function current_block() {
    local result=`coda client status -json | jq .block_count 2> /dev/null`
    echo "${result}"
}

start=$(current_block)
if [ -z "$start" ]
then
    echo 'Unable to communicate with coda daemon'
    exit 0
fi
slot_duration=`coda client status -json | jq .consensus_configuration.slot_duration 2> /dev/null`

# Sleep for 1/5th of a slot time (linux sleep takes floats)
sleep_duration=`echo ${slot_duration}/1000/5 | bc -l`

# Check for CLI args
# If given '+', add to current
if [[ $1 == +* ]]
then
    end=`echo ${start}${1} | bc`
# if a integer is given, use that number
elif [[ -n "$1" ]]
then
    end="${1}"
# with no argument, add one
else
    end=$(($start + 1))
fi

SECONDS=0
echo "$(date) - SLEEPING - START_BLOCK:${start} END_BLOCK:${end}"

# Main sleep loop
while [ $(current_block) -lt ${end} ]
do
    sleep $sleep_duration
done
echo "$(date) - REACHED - END_BLOCK: ${end} - ELAPSED: ${SECONDS} s"


