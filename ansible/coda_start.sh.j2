#!/bin/bash

### Script to make starting coda daemons a little easier
### built from with ansible jinja2

set -e

if pgrep -f "coda daemon" > /dev/null; then
    echo "Coda Already Running"
    exit
fi

# If test-code exists, mv it (previous crash)
if [ -d "/home/admin/test-coda" ]; then
    DS=`date +"%Y-%m-%d_%H-%M-%S"`
    mv /home/admin/test-coda /home/admin/test-coda-CRASH-${DS}
fi

# Make work dir if needed
if [ ! -d "/home/admin/test-coda" ]; then
  mkdir -p /home/admin/test-coda
fi

# Build snarkwork whitelist ips (derived by ansible - global)
# liberal list (all groups)
echo "( 127.0.0.1 {% for host in groups['all']  %}{{ hostvars[host].ec2_ip_address }} {% endfor %})" > /home/admin/test-coda/client_whitelist

# External ip (derived by ansible - unique per host)
EXTERNAL_IP='{{ ec2_ip_address }}'

# Default ports start at 8301
CODA_RPCPORT=8301
CODA_EXTPORT=$(($CODA_RPCPORT + 1))
CODA_PEERPORT=$(($CODA_RPCPORT + 2))
CODA_QLPORT=$(($CODA_RPCPORT + 3))
PUBLIC_KEY='tNci9ERxHGkemqBmNxEWTcPgY5sn347yq6BFcUGTpve6aJpaDUgaaTEQ3rfAgYeK7KhzEbYoJvSbqQ8u88aBNtu8ALVcEeRo4ei6sGjxMsmBAJW7vwW57KLzrvou4YEMA3saq6Xqtpg3sb'

# Only required when using TIME_OFFSET build
#export CODA_TIME_OFFSET=$(echo "{{ testnet_timestamp }} - $(date --date="2019-01-30 12:00:00-08:00" +%s)" | bc)

CODA_SEEDLIST="{% for host in groups['tag_testnet_' + netname]  %}-peer {{ hostvars[host].ec2_ip_address }}:${CODA_PEERPORT} {% endfor %}" # derived from ansible
CODA_ROLE=$(cat /etc/coda-rolename)

CLI_COMMON="-background -tracing -no-bans -log-json -log-level Trace "
CLI_COMMON+="-client-port ${CODA_RPCPORT} " # Default
CLI_COMMON+="-external-port ${CODA_EXTPORT} "
CLI_COMMON+="-config-directory /home/admin/test-coda "
CLI_COMMON+="-external-ip ${EXTERNAL_IP} "
CLI_COMMON+="-rest-port ${CODA_QLPORT} "

# Main start
case $CODA_ROLE in
"seed")
    CLI_ROLE=""
    ;;
"seedjoiner")
    CLI_ROLE="${CODA_SEEDLIST} "
    CLI_ROLE+=""
    ;;
"snarkcoordinator")
    CLI_ROLE="${CODA_SEEDLIST} "
    CLI_ROLE+="-run-snark-worker ${PUBLIC_KEY} "
    CLI_ROLE+="-snark-worker-fee 2 -work-selection seq "
    export OMP_NUM_THREADS=4
    ;;
"blockproducer")
    CLI_ROLE="${CODA_SEEDLIST} "
    CLI_ROLE+=" -propose-key /home/admin/wallet-keys/proposerkey "
    # Note: Following flag strips the propose key of its password and
    # imports it into the Daemon's internal wallet store.
    CLI_ROLE+=" -unsafe-track-propose-key "
    ;;
"archive")
    CLI_ROLE="${CODA_SEEDLIST} "
    CLI_ROLE+=" -propose-key /home/admin/wallet-keys/proposerkey "
    # Note: Following flag strips the propose key of its password and
    # imports it into the Daemon's internal wallet store.
    CLI_ROLE+=" -unsafe-track-propose-key "
    ;;
*)
    echo "Uknown CODA_ROLE ${CODA_ROLE}"
    exit
esac

echo "Starting coda ${CODA_ROLE}"
CMD="coda daemon ${CLI_COMMON} ${CLI_ROLE}"
echo "Running: ${CMD}"
CODA_PRIVKEY_PASS="{{ privkey_pass }}" ${CMD}

# Start worker function for starting sub-snark workers
start_worker () {
    if [ -z "$1" ]
    then
        DAEMON='127.0.0.1:8301'
    else
        DAEMON=$1
    fi

    NEW_UUID=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'A-Z0-9' | fold -w 8 | head -n 1)
    echo ${NEW_UUID}
    mkdir test-snark-worker-${NEW_UUID}
    nohup nice nice coda internal snark-worker \
        -daemon-address $DAEMON \
        -shutdown-on-disconnect false  2>&1 >> test-snark-worker-${NEW_UUID}/coda.log &
}

# Secondary start of snark workers
case $CODA_ROLE in
"snarker")
    echo "Sleeping before adding more snark workers."
    sleep 10 # wait for daemon to come up

    CORE_COUNT=`nproc --all`
    CORE_SCALE=$(( $CORE_COUNT / 5 ))

    export OMP_NUM_THREADS=4
    count=1
    while [ "$(pgrep  -f 'coda internal snark-worker' | wc -l)" -lt "$CORE_SCALE" ]; do
        echo "Worker Count: ${count}"
        start_worker
        count=$((count+1))
        sleep 5 # wait for it to stablize
    done
    ;;
esac
