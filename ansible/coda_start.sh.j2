#!/bin/bash

### Script to make starting coda daemons a little easier
### built from with ansible jinja2

set -e

if pgrep -f "coda daemon" > /dev/null; then
    echo "Coda Already Running - continuing with DRYRUN mode"
    DRYRUN=true
else
    DRYRUN=false
fi

CODA_ROLE=$(cat /etc/coda-rolename)

# Conf dir management
case $CODA_ROLE in
"archive")
    echo "Archive node -- Not altering test_coda dir"
    ;;
*)
    # If test-code exists, mv it (previous crash)
    if [ -d "/home/admin/test-coda" ]; then
        DS=$(date +"%Y-%m-%d_%H-%M-%S")
        if [ "$DRYRUN" = false ]; then
            mv /home/admin/test-coda /home/admin/test-coda-CRASH-"${DS}"
        fi
    fi
    ;;
esac

# Make conf dir if needed
if [ ! -d "/home/admin/test-coda" ]; then
  mkdir -p /home/admin/test-coda
fi

# Build snarkwork whitelist ips (derived by ansible - global)
# liberal list (all groups)
if [ "$DRYRUN" = false ]; then
    echo "( 127.0.0.1 {% for host in groups['all']  %}{{ hostvars[host].ec2_ip_address }} {% endfor %})" > /home/admin/test-coda/client_whitelist
fi

# External ip (derived by ansible - unique per host)
EXTERNAL_IP='{{ ec2_ip_address }}'

# Default ports start at 8301
CODA_RPCPORT=8301
CODA_EXTPORT=$((CODA_RPCPORT + 1))
CODA_PEERPORT=$((CODA_RPCPORT + 2))
CODA_QLPORT=3085
PUBLIC_KEY='tdNDs39Vk2rLLy9o43yNVBFrouEY9p49SHQjSyV4vvX7wpi52x1k3Eykg8soVmwLFDqJBfF3vvKWZuz2xjaQT9opUA5P2miTpJwP1RGu9vm2mM1gFcZxNd1fHBY8Jggezr7We9qCShZwCY'

# Set offset if it is being used
if [ -f "/etc/coda_offset" ]; then
    source /etc/coda_offset
    cat /etc/coda_offset
fi

# tag_role_{{ netname }}_seed
CODA_SEEDLIST="-peer {{ netname }}.o1test.net:8303 " # Initial seed peer(s)
CODA_SEEDLIST+="{% for host in groups['tag_testnet_' + netname]  %}-peer {{ hostvars[host].ec2_ip_address }}:${CODA_PEERPORT} {% endfor %}" # All other nodes

# Common CLI options for all roles
CLI_COMMON="\
 -background \
 -tracing -log-json -log-level Trace \
 -client-port ${CODA_RPCPORT} \
 -external-port ${CODA_EXTPORT} \
 -config-directory /home/admin/test-coda \
 -external-ip ${EXTERNAL_IP} \
 -rest-port ${CODA_QLPORT} "

# Main start
case $CODA_ROLE in
"seed")
    CLI_ROLE=""
    ;;
"seedjoiner")
    CLI_ROLE="${CODA_SEEDLIST} "
    ;;
"snarkcoordinator")
    export OMP_NUM_THREADS=4
    CLI_ROLE="${CODA_SEEDLIST} \
    -run-snark-worker ${PUBLIC_KEY} \
    -snark-worker-fee 2 \
    -work-selection seq "
    ;;
"blockproducer")
    CLI_ROLE="${CODA_SEEDLIST} \
    -propose-key /home/admin/wallet-keys/proposerkey "
    ;;
"archive")
    CLI_ROLE="${CODA_SEEDLIST} \
    -archive "
    ;;
*)
    echo "Uknown CODA_ROLE ${CODA_ROLE}"
    exit
esac

echo "Starting coda ${CODA_ROLE}"
CMD="coda daemon ${CLI_COMMON} ${CLI_ROLE}"
echo "Running: ${CMD}"

if [ "$DRYRUN" = false ]; then
    CODA_PRIVKEY_PASS="{{ privkey_pass }}"  ${CMD}
else
    echo "NO-OP: DryRun"
fi

# Start worker function for starting sub-snark workers
start_worker () {
    if [ -z "$1" ] ; then
        DAEMON='127.0.0.1:8301'
    else
        DAEMON=$1
    fi
    export OMP_NUM_THREADS=4
    NEW_UUID=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'A-Z0-9' | fold -w 8 | head -n 1)
    echo "${NEW_UUID}"
    mkdir "test-snark-worker-${NEW_UUID}"
    nohup nice nice coda internal snark-worker \
        -daemon-address ${DAEMON} \
        -shutdown-on-disconnect false  2>&1 >> test-snark-worker-${NEW_UUID}/coda.log &
}

# Secondary start of snark workers
case $CODA_ROLE in
"snarkcoordinator")
    echo "Sleeping before adding more snark workers."
    sleep 10 # wait for daemon to come up

    CORE_COUNT=$(nproc --all)
    CORE_SCALE=$(( CORE_COUNT / 5 ))
    count=1
    while [ "$(pgrep  -f 'coda internal snark-worker' | wc -l)" -lt "$CORE_SCALE" ]; do
        echo "Worker Count: ${count}"
        start_worker
        count=$((count+1))
        sleep 5 # wait for daemons to stablize
    done
    ;;
esac
