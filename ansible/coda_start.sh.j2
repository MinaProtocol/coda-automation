#!/bin/bash

### Script to make starting coda daemons a little easier
### built from with ansible jinja2

set -e

if pgrep -f "coda daemon" > /dev/null; then
    echo "Coda Already Running - continuing with DRYRUN mode"
    DRYRUN=true
else
    DRYRUN=false
fi

CODA_ROLE=$(cat /etc/coda-rolename)

# Conf dir management
case $CODA_ROLE in
"archive")
    echo "Archive node -- Not altering test_coda dir"
    ;;
*)
    # If test-code exists, mv it (previous crash)
    if [ -d "/home/admin/test-coda" ]; then
        DS=$(date +"%Y-%m-%d_%H-%M-%S")
        if [ "$DRYRUN" = false ]; then
            mv /home/admin/test-coda /home/admin/test-coda-CRASH-"${DS}"
        fi
    fi
    ;;
esac

# Make conf dir if needed
if [ ! -d "/home/admin/test-coda" ]; then
  mkdir -p /home/admin/test-coda
fi

# Build snarkwork whitelist ips (derived by ansible - global)
# liberal list (all groups)
if [ "$DRYRUN" = false ]; then
    echo "( 127.0.0.1 {% for host in groups['all']  %}{{ hostvars[host].ec2_ip_address }} {% endfor %})" > /home/admin/test-coda/client_whitelist
fi

# External ip (derived by ansible - unique per host)
EXTERNAL_IP='{{ ec2_ip_address }}'

# Default ports start at 8301
CODA_RPCPORT=8301
CODA_EXTPORT=$((CODA_RPCPORT + 1))
CODA_PEERPORT=$((CODA_RPCPORT + 2))
CODA_QLPORT=3085
CODA_METRICS_PORT=10000
PUBLIC_KEY='tdNDs39Vk2rLLy9o43yNVBFrouEY9p49SHQjSyV4vvX7wpi52x1k3Eykg8soVmwLFDqJBfF3vvKWZuz2xjaQT9opUA5P2miTpJwP1RGu9vm2mM1gFcZxNd1fHBY8Jggezr7We9qCShZwCY'

# Set offset if it is being used
if [ -f "/etc/coda_offset" ]; then
    source /etc/coda_offset
    cat /etc/coda_offset
fi

# tag_role_{{ netname }}_seed
echo "Using libp2p"
# FIXME Hardcoded IP
CODA_SEEDLIST="\
    -peer /dns4/peer1-$(tr -s '_' '-' <<< {{ netname }}).o1test.net/tcp/${CODA_PEERPORT}/ipfs/12D3KooWHMmfuS9DmmK9eH4GC31arDhbtHEBQzX6PwPtQftxzwJs \
    -peer /dns4/peer2-$(tr -s '_' '-' <<< {{ netname }}).o1test.net/tcp/${CODA_PEERPORT}/ipfs/12D3KooWAux9MAW1yAdD8gsDbYHmgVjRvdfYkpkfX7AnyGvQaRPF \
    -peer /dns4/peer3-$(tr -s '_' '-' <<< {{ netname }}).o1test.net/tcp/${CODA_PEERPORT}/ipfs/12D3KooWCZA4pPWmDAkQf6riDQ3XMRN5k99tCsiRhBAPZCkA8re7 \
    "

# Call out to specialized start options subscript
CODA_CLI_DAEMON_HELP_HASH=$(coda daemon -help  | grep -o '\[.*]' | sort | md5sum | cut -d' ' -f1)

if [ -f "coda_CLI_OPTIONS_${CODA_CLI_DAEMON_HELP_HASH}.sh" ]; then
    echo "Using specific start subscript - coda_start_${CODA_CLI_DAEMON_HELP_HASH}.sh"
    source coda_CLI_OPTIONS_${CODA_CLI_DAEMON_HELP_HASH}.sh
else
    echo "WARN: Using default CLI OPTIONS subscript - coda_CLI_OPTIONS_DEFAULT.sh"
    source coda_CLI_OPTIONS_DEFAULT.sh
fi

# Start worker function for starting sub-snark workers
start_worker () {
    if [ -z "$1" ] ; then
        DAEMON='127.0.0.1:8301'
    else
        DAEMON=$1
    fi
    export OMP_NUM_THREADS=1
    NEW_UUID=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'A-Z0-9' | fold -w 8 | head -n 1)
    echo "${NEW_UUID}"
    mkdir "test-snark-worker-${NEW_UUID}"
    nohup nice nice coda internal snark-worker \
        -daemon-address ${DAEMON} \
        -shutdown-on-disconnect false  2>&1 >> test-snark-worker-${NEW_UUID}/coda.log &
}

# Secondary start of snark workers
case $CODA_ROLE in
"snarkcoordinator")
    echo "Sleeping before adding more snark workers."
    sleep 10 # wait for daemon to come up

    CORE_COUNT=$(nproc --all)
    CORE_SCALE=$(( CORE_COUNT / 2 ))
    count=1
    while [ "$(pgrep  -f 'coda internal snark-worker' | wc -l)" -le "$CORE_SCALE" ]; do
        count=$(pgrep  -f 'coda internal snark-worker' | wc -l)
        echo "Worker Count: ${count} of ${CORE_SCALE}"
        start_worker
        count=$((count+1))
        sleep 2 # wait for daemons to stablize
    done
    ;;
esac
