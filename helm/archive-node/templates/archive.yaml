# Coda Daemon
apiVersion: apps/v1
kind: Deployment
metadata:
  name: archive-node-{{ .Values.archiveNodeName }}
  labels:
    app: archive-node-{{ .Values.archiveNodeName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: archive-node-{{ .Values.archiveNodeName }}
  template:
    metadata:
      labels:
        app: archive-node-{{ .Values.archiveNodeName }}
        testnet: {{ $.Values.testnetName }}
        role: archive-node
        version: {{ (split ":" $.Values.codaImage)._1 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '10000'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: coda
        resources:
          limits:
            memory: 6.0Gi
          requests:
            memory: 2.0Gi
            cpu: 1000m
        image: {{ $.Values.codaImage }}
        command: ["/usr/bin/dumb-init", "/root/init_coda.sh"]
        args: [ "daemon",
          "-log-level", "Trace",
          "-log-json",
          "-config-directory", "/root/.coda-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-archive-address", "3086",
          {{- range $.Values.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
        ]
        env:
          - name: DAEMON_REST_PORT
            value: "3085"
          - name: DAEMON_ARCHIVE_PORT
            value: "3086"
          - name: DAEMON_CLIENT_PORT
            value: "8301"
          - name: DAEMON_METRICS_PORT
            value: "10000"
          - name: DAEMON_EXTERNAL_PORT
            value: {{ .Values.hostPort | quote }}
        ports:
          - containerPort: {{ .Values.hostPort }}
            hostPort: {{ .Values.hostPort }}
            protocol: TCP
        imagePullPolicy: Always
      # Archive Process
      - name: archive
        image: {{ $.Values.archiveImage }}
        command: ["bash", "-c"]
        args: [ "coda-archive -postgres-uri {{ tpl .Values.postgresUri . }} -server-port 3086" ]
        env:
        imagePullPolicy: Always
      {{- if $.Values.hasura.active }}
      # Hasura (Postgres and Graphql bridge-interface) Process
      - name: hasura
        image: {{ $.Values.hasuraImage }}
        imagePullPolicy: Always
        env:
        - name: HASURA_GRAPHQL_DATABASE_URL
          value: {{ tpl .Values.postgresUri . }}
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: "true"
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          value: {{ $.Values.hasura.adminPassword }}
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
      {{ end }

# DB Bootstrap Job
