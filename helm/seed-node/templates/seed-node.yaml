{{- if $.Values.seed.active }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{tpl $.Values.seed.fullname .}}
  labels:
    app: {{tpl $.Values.seed.fullname .}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{tpl $.Values.seed.fullname .}}
  template:
    metadata:
      labels:
        app: {{tpl $.Values.seed.fullname .}}
        testnet: {{ $.Values.testnetName }}
        role: seed
        version: {{ trunc 6 (split ":" $.Values.coda.image)._1 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '10000'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: coda-network-services
        resources:
          requests:
            memory: 512m
            cpu: 0.1
        image: gcr.io/o1labs-192920/coda-network-services:latest
        command: ["bash"]
        args: ["-c", "echo 'hi'; RESTART_NODES=$(RESTART_NODES) RESTART_EVERY_MINS=$(RESTART_EVERY_MINS) MAKE_REPORTS=$(MAKE_REPORTS) MAKE_REPORT_EVERY_MINS=$(MAKE_REPORT_EVERY_MINS) MAKE_REPORT_DISCORD_WEBHOOK_URL=\"$(MAKE_REPORT_DISCORD_WEBHOOK_URL)\" MAKE_REPORT_ACCOUNTS=\"$(MAKE_REPORT_ACCOUNTS)\" /code/main.sh"]
        env:
          - name: "RESTART_EVERY_MINS"
            value: {{ .Values.codaNetworkServicesConfig.restartEveryMins | quote }}
          - name: "RESTART_NODES"
            value: {{ .Values.codaNetworkServicesConfig.restartNodes | quote }}
          - name: "MAKE_REPORTS"
            value: {{ .Values.codaNetworkServicesConfig.makeReports | quote }}
          - name: "MAKE_REPORT_EVERY_MINS"
            value: {{ .Values.codaNetworkServicesConfig.makeReportEveryMins | quote }}
          - name: "MAKE_REPORT_DISCORD_WEBHOOK_URL"
            value: {{ .Values.codaNetworkServicesConfig.makeReportDiscordWebhookUrl | quote }}
          - name: "MAKE_REPORT_ACCOUNTS"
            value: {{ .Values.codaNetworkServicesConfig.makeReportAccounts | quote }}
        ports: 
          - name: metrics
            containerPort: 8000
        imagePullPolicy: Always
      - name: seed
        resources:
          limits:
          requests:
            memory: 14.0Gi
            cpu: 8.0
        image: {{ $.Values.coda.image }}
        command: ["/usr/bin/dumb-init", "/root/init_coda.sh"]
        args: [ "daemon",
          "-log-level", "Trace",
          "-log-json",
          "-log-snark-work-gossip", "true",
          "-config-directory", "/root/.coda-config",
          "-log-received-blocks", "true",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-enable-peer-exchange", "true",
          "-seed",
          "-discovery-keypair", "{{ $.Values.seed.discoveryKeypair }}",
          {{- if (ne $.Values.coda.runtimeConfig "") }}
          "-config-file", "/config/daemon.json",
          "-generate-genesis-proof", "true",
          {{- end }}
          {{- range $.Values.coda.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
        ]
        env:
          - name: "RAYON_NUM_THREADS"
            value: "6"
          - name: DAEMON_REST_PORT
            value: "3085"
          - name: DAEMON_CLIENT_PORT
            value: {{ .Values.seed.rpcPort | quote }}
          - name: DAEMON_METRICS_PORT
            value: "10000"
          - name: CODA_CLIENT_TRUSTLIST
            value: "10.0.0.0/8"
          - name: DAEMON_EXTERNAL_PORT
            value: {{ .Values.seed.hostPort | quote }}
        ports:
        - containerPort: {{ .Values.seed.hostPort }}
          hostPort: {{ .Values.seed.hostPort }}
          protocol: TCP
        imagePullPolicy: Always
      {{- if (ne $.Values.coda.runtimeConfig "") }}
        volumeMounts:
        - name: daemon-config
          mountPath: "/config/"
      volumes:
      - name: daemon-config
        configMap:
          name: {{ tpl $.Values.seed.fullname . }}-daemon-config
      {{- end -}}
{{- end }}
